# from src.projectDefault.logging import logger# logger.info("This is our custom log!")## another way to do this would be to put the logging __init__.py instructions## into the mlproj __init__.py file, so that you call from projectDefault ## import logger (directly) instead of going through src.projectDefault.loggingfrom src.projectDefault.logging import loggerfrom src.projectDefault.pipeline.stage_01_data_ingestion import DataIngestionTrainingPipelinefrom src.projectDefault.pipeline.stage_02_data_validation import DataValidationTrainingPipelinefrom src.projectDefault.pipeline.stage_03_data_transformation import DataTransformationTrainingPipelineSTAGE_NAME = "Data Ingestion"try:    logger.info(f">>>>>> stage {STAGE_NAME} started <<<<<<")    data_ingestion = DataIngestionTrainingPipeline()    data_ingestion.main()    logger.info(f">>>>>> stage {STAGE_NAME} completed <<<<<<\n\nx==========x")except Exception as e:    logger.exception(e)    raise(e)STAGE_NAME = "Data Validation"try:    logger.info(f">>>>>> stage {STAGE_NAME} started <<<<<<")    data_ingestion = DataValidationTrainingPipeline()    data_ingestion.main()    logger.info(f">>>>>> stage {STAGE_NAME} completed <<<<<<\n\nx==========x")except Exception as e:    logger.exception(e)    raise(e)STAGE_NAME = "Data Transformation"try:    logger.info(f">>>>>> stage {STAGE_NAME} started <<<<<<")    obj = DataTransformationTrainingPipeline()    obj.main()    logger.info(f">>>>>> stage {STAGE_NAME} completed <<<<<<\n\nx===========x")except Exception as e:    logger.exception(e)    raise(e)